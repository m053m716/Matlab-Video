function roi = getSyncROI(meta,roi)
%% GETSYNCROI  Get synchronization region-of-interest
%
%  GETSYNCROI(meta)
%
%  --------
%   INPUTS
%  --------
%    meta      :     Table of metadata about videos from a recording
%
%  --------
%   OUTPUT
%  --------
%     roi      :     Table of roi metadata
%
% By: Max Murphy  v1.0  2019-04-24  Original version (R2017a)

%%
idx = 1;
curAngle = 1;

fig = figure('Name','Sync ROI GUI',...
   'Units','Normalized',...
   'Color','w',...
   'Position',[0.1 0.1 0.8 0.8],...
   'WindowKeyPressFcn',@shortKey);

lab = uicontrol(fig,'Style','text',...
   'Units','Normalized',...
   'Position',[0.375 0.01 0.1 0.05],...
   'FontName','Arial',...
   'FontSize',18,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String',[meta.Angle{idx} ': ' num2str(meta.Index(idx))]);

ax = axes(fig,'Units','Normalized',...
   'XTick',[],...
   'XColor','w',...
   'XLim',[1 meta.Width(idx)],...
   'XLimMode','Manual',...
   'YTick',[],...
   'YColor','w',...
   'YLim',[1 meta.Height(idx)],...
   'YDir','rev',...
   'YLimMode','Manual',...
   'Position',[0.05 0.05 0.8 0.8],...
   'NextPlot','replacechildren');

V = VideoReader(fullfile(meta.Folder{idx},meta.Name{idx}));
im = imagesc(ax,[1 meta.Width(idx)],[1 meta.Height(idx)],V.readFrame);
curTime = V.CurrentTime;

tlab = uicontrol(fig,'Style','edit',...
   'Units','Normalized',...
   'Position',[0.25 0.85 0.1 0.1],...
   'FontName','Arial',...
   'FontSize',18,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String',num2str(V.CurrentTime),...
   'Callback',@tlabCB);


rgb = {uicontrol(fig,'Style','text',...
   'Units','Normalized',...
   'Position',[0.95 0.825 0.05 0.1],...
   'FontName','Arial',...
   'FontSize',18,...
   'FontWeight','bold',...
   'ForegroundColor','r',...
   'BackgroundColor','w',...
   'String','R');...
   uicontrol(fig,'Style','text',...
   'Units','Normalized',...
   'Position',[0.95 0.725 0.05 0.1],...
   'FontName','Arial',...
   'FontSize',18,...
   'FontWeight','bold',...
   'ForegroundColor','g',...
   'BackgroundColor','w',...
   'String','G');
   uicontrol(fig,'Style','text',...
   'Units','Normalized',...
   'Position',[0.95 0.625 0.05 0.1],...
   'FontName','Arial',...
   'FontSize',18,...
   'FontWeight','bold',...
   'ForegroundColor','b',...
   'BackgroundColor','w',...
   'String','B');
};

rgb_thresh = {uicontrol(fig,'Style','edit',...
   'Units','Normalized',...
   'Position',[0.875 0.875 0.05 0.05],...
   'FontName','Arial',...
   'FontSize',18,...
   'FontWeight','bold',...
   'ForegroundColor','r',...
   'BackgroundColor','w',...
   'String','NaN',...
   'UserData',1,...
   'Callback',@threshCB);...
   uicontrol(fig,'Style','edit',...
   'Units','Normalized',...
   'Position',[0.875 0.775 0.05 0.05],...
   'FontName','Arial',...
   'FontSize',18,...
   'FontWeight','bold',...
   'ForegroundColor','g',...
   'BackgroundColor','w',...
   'String','NaN',...
   'UserData',2,...
   'Callback',@threshCB);
   uicontrol(fig,'Style','edit',...
   'Units','Normalized',...
   'Position',[0.875 0.675 0.05 0.05],...
   'FontName','Arial',...
   'FontSize',18,...
   'FontWeight','bold',...
   'ForegroundColor','b',...
   'BackgroundColor','w',...
   'String','NaN',...
   'UserData',3,...
   'Callback',@threshCB);
};

uicontrol(fig,'Style','Pushbutton',...
   'Units','Normalized',...
   'Position',[0.9 0.05 0.075 0.075],...
   'FontName','Arial',...
   'FontSize',18,...
   'ForegroundColor','k',...
   'BackgroundColor',[0.4 0.4 0.9],...
   'String','Submit',...
   'Callback',@submitCB);

Angle = unique(meta.Angle);
Angle = reshape(Angle,numel(Angle),1);
angleLB = uicontrol(fig,'Style','listbox',...
   'Units','Normalized',...
   'Position',[0.9 0.45 0.075 0.2],...
   'FontName','Arial',...
   'FontSize',16,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String',Angle,...
   'Callback',@angleCB);
   
tmpStr = unique(meta.Index);
str = cell(numel(tmpStr),1);
for ii = 1:numel(str)
   str{ii} = num2str(tmpStr(ii));
end
idxLB = uicontrol(fig,'Style','listbox',...
   'Units','Normalized',...
   'Position',[0.9 0.15 0.075 0.2],...
   'FontName','Arial',...
   'FontSize',16,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String',str,...
   'Callback',@indexCB);

if nargin < 2
   Position = repmat({[nan nan nan nan]},numel(Angle),1);
   Thresh = repmat({[nan nan nan]},numel(Angle),1);
   Crop = repmat({[nan nan nan nan]},numel(Angle),1);
   roi = table(Angle,Position,Thresh,Crop);
end

h = imrect(ax);
fcn = makeConstrainToRectFcn('imrect',get(gca,'XLim'),get(gca,'YLim'));
setPositionConstraintFcn(h,fcn); 
addNewPositionCallback(h,@(p) updateROIparams(p));

hh = imrect(ax);
setColor(hh,'r');
setPositionConstraintFcn(hh,fcn);
addNewPositionCallback(hh,@(p) updateCropparams(p));

waitfor(fig);

   function submitCB(~,~)
      mtb(roi);
   end

   function angleCB(src,~)
      tmp = find(meta.Index==str2double(idxLB.String{idxLB.Value}) & ...
         strcmpi(meta.Angle,src.String{src.Value}),1,'first');
      if tmp ~= idx
         idx = tmp;
         curAngle = src.Value;
         updateNewVidImage();
         V.CurrentTime = curTime;
         for k = 1:3
            rgb_thresh{k}.String = num2str(roi.Thresh{curAngle}(k));
         end
      end
   end

   function indexCB(src,~)
      tmp = find(strcmpi(meta.Angle,angleLB.String{angleLB.Value}) & ...
         meta.Index==str2double(src.String{src.Value}),1,'first');
      if tmp ~= idx
         idx = tmp;
         updateNewVidImage();
         for k = 1:3
            rgb_thresh{k}.String = num2str(roi.Thresh{curAngle}(k));
         end
      end
      
   end

   function shortKey(~,evt)
      switch evt.Key
         case 'a'
            if V.CurrentTime > (2/24)
               V.CurrentTime = V.CurrentTime - (1/24);
               curTime = V.CurrentTime;
               tlab.String = num2str(curTime);
               im.CData = V.readFrame;
               updateROIparams();
            end
         case 'd'
            if V.CurrentTime < (V.Duration - (1/24))
               V.CurrentTime = V.CurrentTime + (1/24);
               curTime = V.CurrentTime;
               tlab.String = num2str(curTime);
               im.CData = V.readFrame;
               updateROIparams();
            end
      end
   end

   function updateNewVidImage()
      V = VideoReader(fullfile(meta.Folder{idx},meta.Name{idx}));
      im.CData = V.readFrame;
      im.XData = [1 meta.Width(idx)];
      im.YData = [1 meta.Height(idx)];
      ax.XLim = im.XData;
      ax.YLim = im.YData;
      if isnan(roi.Position{curAngle}(1))
         for k = 1:3
            rgb{k}.String = 'NaN';
         end
      else
         setPosition(h,roi.Position{curAngle});
         updateROIparams();
      end
      if ~isnan(roi.Crop{curAngle}(1))
         setPosition(hh,roi.Crop{curAngle});
      end
      
      lab.String = [meta.Angle{idx} ': ' num2str(meta.Index(idx))];
   end

   function mu = channelAvg(pos,I)
      mu = mean(mean(I(round(pos(2)):round((pos(2)+pos(4))),...
         round(pos(1)):round((pos(1)+pos(3))))));
   end

   function updateROIparams(p)
      if nargin > 0
         roi.Position{curAngle} = round(p);
      end
      for k = 1:3
         mu = channelAvg(roi.Position{curAngle},im.CData(:,:,k));
         rgb{k}.String = num2str(mu);
      end
   end

   function updateCropparams(p)
      p = round(p);
      if isEven(p(3)) % Since 1-indexed, needs to be odd for H.264 codec
         p(3) = p(3) - 1;
      end
      if isEven(p(4))
         p(4) = p(4) - 1;
      end
      roi.Crop{curAngle} = p;
   end

   function threshCB(src,~)
      roi.Thresh{curAngle}(src.UserData) = str2double(src.String);
   end

   function tlabCB(src,~)
      curTime = str2double(src.String);
      V.CurrentTime = curTime;
      im.CData = V.readFrame;
      updateROIparams();
   end

end