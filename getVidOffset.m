function meta = getVidOffset(meta,trials)
%% GETVIDOFFSET   Fixes video offset for each video
%
%  meta = GETVIDOFFSET(meta);
%
%  --------
%   INPUTS
%  --------
%    meta      :     Metadata table for each video from GETVIDFILE
%
%    trials    :     Trials data struct that has the sync signal for when
%                       each trial was running.
%
%  --------
%   OUTPUT
%  --------
%    meta      :     Updated metadata table, with tStart and tStop columns
%                       modified to reflect the offset of corresponding
%                       videos relative to neural signals.
%
% By: Max Murphy  v1.0  2019-05-04  Original version (R2017a)

%%
%%
idx = 1;
zoomLevel = 1;

fig = figure('Name','Set Offset GUI',...
   'Units','Normalized',...
   'Color','w',...
   'Position',[0.1 0.1 0.8 0.8],...
   'WindowKeyPressFcn',@shortKey);

ax = axes(fig,'Units','Normalized',...
   'XTick',[],...
   'XColor','w',...
   'XLim',[1 meta.Width(idx)],...
   'XLimMode','Manual',...
   'YTick',[],...
   'YColor','w',...
   'YLim',[1 meta.Height(idx)],...
   'YDir','rev',...
   'YLimMode','Manual',...
   'Position',[0.05 0.05 0.8 0.8],...
   'NextPlot','replacechildren');

V = VideoReader(fullfile(meta.Folder{idx},meta.Name{idx}));
im = imagesc(ax,[1 meta.Width(idx)],[1 meta.Height(idx)],V.readFrame);
curNeuTime = V.CurrentTime;

uicontrol(fig,'Style','text',...
   'Units','Normalized',...
   'Position',[0.375 0.95 0.1 0.05],...
   'BackgroundColor','w',...
   'ForegroundColor','m',...
   'FontName','Arial',...
   'FontSize',14,...
   'String','Neural Recording Time (sec)');

t_ax = axes(fig,'Units','Normalized',...
   'XTick',[min(trials.t) ceil(max(trials.t))],...
   'XColor','m',...
   'XLim',[min(trials.t) ceil(max(trials.t))],...
   'XLimMode','Manual',...
   'XAxisLocation','top',...
   'YTick',[],...
   'YColor','w',...
   'YLim',[-0.1 1.1],...
   'YLimMode','Manual',...
   'Position',[0.05 0.85 0.8 0.1],...
   'NextPlot','add',...
   'ButtonDownFcn',@t_axCB);

plot(t_ax,trials.t,trials.data,'LineWidth',1.75,'Color','k',...
   'ButtonDownFcn',@t_axCB);
h = line(t_ax,[0 0],[0 1],'Color','b','LineStyle',':','LineWidth',2,...
   'ButtonDownFcn',@t_axCB);

lab = uicontrol(fig,'Style','text',...
   'Units','Normalized',...
   'Position',[0.375 0.01 0.1 0.04],...
   'FontName','Arial',...
   'FontSize',18,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String',[meta.Angle{idx} ': ' num2str(meta.Index(idx))]);


uicontrol(fig,'Style','text',...
   'Units','Normalized',...
   'Position',[0.885 0.725 0.1 0.05],...
   'FontName','Arial',...
   'FontSize',14,...
   'FontWeight','bold',...
   'ForegroundColor','b',...
   'BackgroundColor','w',...
   'String','Vid Time');

uicontrol(fig,'Style','text',...
   'Units','Normalized',...
   'Position',[0.885 0.825 0.1 0.05],...
   'FontName','Arial',...
   'FontSize',14,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String','Neural Time');

vidt_lab = uicontrol(fig,'Style','edit',...
   'Units','Normalized',...
   'Position',[0.875 0.70 0.1 0.05],...
   'FontName','Arial',...
   'FontSize',18,...
   'ForegroundColor','b',...
   'BackgroundColor','w',...
   'FontWeight','bold',...
   'String',num2str(V.CurrentTime),...
   'Callback',@vidt_labCB);

neut_lab = uicontrol(fig,'Style','edit',...
   'Units','Normalized',...
   'Position',[0.875 0.80 0.1 0.05],...
   'FontName','Arial',...
   'FontSize',18,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String',num2str(curNeuTime),...
   'Callback',@neut_labCB);

Angle = unique(meta.Angle);
Angle = reshape(Angle,numel(Angle),1);
angleLB = uicontrol(fig,'Style','listbox',...
   'Units','Normalized',...
   'Position',[0.9 0.45 0.075 0.2],...
   'FontName','Arial',...
   'FontSize',16,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String',Angle,...
   'Callback',@angleCB);
   
tmpStr = unique(meta.Index);
str = cell(numel(tmpStr),1);
for ii = 1:numel(str)
   str{ii} = num2str(tmpStr(ii));
end
idxLB = uicontrol(fig,'Style','listbox',...
   'Units','Normalized',...
   'Position',[0.9 0.15 0.075 0.2],...
   'FontName','Arial',...
   'FontSize',16,...
   'ForegroundColor','k',...
   'BackgroundColor','w',...
   'String',str,...
   'Callback',@indexCB);

waitfor(fig);

   function angleCB(src,~)
      tmp = find(meta.Index==str2double(idxLB.String{idxLB.Value}) & ...
         strcmpi(meta.Angle,src.String{src.Value}),1,'first');
      if tmp ~= idx
         idx = tmp;
         updateNewVidImage();
         V.CurrentTime = curNeuTime - meta.tStart(idx);
         refreshImageFrame();
      end
   end

   function indexCB(src,~)
      tmp = find(strcmpi(meta.Angle,angleLB.String{angleLB.Value}) & ...
         meta.Index==str2double(src.String{src.Value}),1,'first');
      if tmp ~= idx
         idx = tmp;
         updateNewVidImage();
         curNeuTime = V.CurrentTime + meta.tStart(idx);
         refreshImageFrame();
      end
      
   end

   function shortKey(~,evt)
      fs = meta.fs(idx);
      switch evt.Key
         case 'a'
            if V.CurrentTime >= (2/fs)
               V.CurrentTime = V.CurrentTime - (2/fs);
               curNeuTime = curNeuTime - (2/fs);
               refreshImageFrame();
            end
         case 'd'
            if V.CurrentTime < (V.Duration - (1/fs))
               refreshImageFrame();
               curNeuTime = curNeuTime + (1/fs);
            end
         case 'add'
            zoomLevel = getZoomState(zoomLevel,1);
            drawnow;
         case 'subtract'
            zoomLevel = getZoomState(zoomLevel,-1);
            drawnow;
      end
   end

   function newZoomState = getZoomState(curZoomState,increment)
      X_LIM = [min(trials.t),max(trials.t);...
         h.XData(1)-50,h.XData(1)+50;...
         h.XData(1)-10,h.XData(1)+10;...
         h.XData(1)-1,h.XData(1)+1;...
         h.XData(1)-0.1,h.XData(1)+0.1;...
         h.XData(1)-0.01,h.XData(1)+0.01];
      
      newZoomState = max(min(curZoomState + increment,size(X_LIM,1)),1);
      if newZoomState < 5
         new_x = [max(floor(X_LIM(newZoomState,1)),0), ...
                  min(ceil(X_LIM(newZoomState,2)),ceil(max(trials.t)))];
      else
         new_x = [max(X_LIM(newZoomState,1),0), ...
                  min(X_LIM(newZoomState,2),max(trials.t))];
      end
      t_ax.XLim = new_x;
      t_ax.XTick = new_x;
   end

   function refreshImageFrame()
      vidt_lab.String = num2str(V.CurrentTime);
      neut_lab.String = num2str(curNeuTime);
      tVid = V.CurrentTime + meta.tStart(idx);
      h.XData = [tVid tVid];
      im.CData = V.readFrame;
   end

   function updateNewVidImage()
      V = VideoReader(fullfile(meta.Folder{idx},meta.Name{idx}));
      im.XData = [1 meta.Width(idx)];
      im.YData = [1 meta.Height(idx)];
      ax.XLim = im.XData;
      ax.YLim = im.YData;      
      lab.String = [meta.Angle{idx} ': ' num2str(meta.Index(idx))];
   end

   function vidt_labCB(src,~)
      V.CurrentTime = str2double(src.String);
      curNeuTime = V.CurrentTime + meta.tStart(idx);
      refreshImageFrame();
   end

   function neut_labCB(src,~)
      gotoNeuTime(str2double(src.String));
   end

   function t_axCB(src,evt)
      % Make sure we are looking at the axes:
      if ~isa(src,'matlab.graphics.axis.Axes')
         src = src.Parent;
      end
      gotoNeuTime(src.CurrentPoint(1,1),evt.Button);
   end

   function gotoNeuTime(t,btn)
      if nargin < 2
         btn = 1;
      end
      switch btn
         case 1 % "default" case if btn arg isn't given
            if (t < meta.tStart(idx)) || (t > meta.tStop(idx))
               tmp = find((meta.tStart < t) & (meta.tStop > t) &...
                  strcmpi(meta.Angle,meta.Angle{idx}),1,'first');
               if isempty(tmp)
                  fprintf(1,'No video corresponding to neural time: %g\n',t);
                  return;
               else
                  idx = tmp;
                  idxLB.Value = meta.Index(idx) + 1;
                  updateNewVidImage();
               end         
            end
            curNeuTime = t;
            V.CurrentTime = curNeuTime - meta.tStart(idx);
            refreshImageFrame();
         case 3
            curNeuTime = t;
            neut_lab.String = num2str(curNeuTime);
            tmp = find(strcmpi(meta.Angle,meta.Angle{idx}));
            tOffset = curNeuTime - (V.CurrentTime + meta.tStart(idx) - ...
               1/(meta.fs(idx)));
            for iTmp = 1:numel(tmp)
               meta.tStart(tmp(iTmp)) = meta.tStart(tmp(iTmp)) + tOffset;
               meta.tStop(tmp(iTmp)) = meta.tStop(tmp(iTmp)) + tOffset;
            end
            h.XData = [t t];
      end
      
   end

end
